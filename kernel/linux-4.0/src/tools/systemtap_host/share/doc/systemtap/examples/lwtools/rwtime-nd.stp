#!/usr/bin/stap
/*
 * rwtime-nd.stp	read/write syscalls by latency.
 *			For Linux, uses SystemTap (non-debuginfo).
 *
 * USAGE: ./rwtime.stp [execname]
 *
 * An option argument of the program name, eg, "httpd", can be provided. Without
 * this, all processes are traced.
 *
 * Copyright (C) 2015 Brendan Gregg.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * 24-Jun-2014	Brendan Gregg	Created this.
 */

global read, write, tproc = "";

probe begin
{
	tproc = argv_1;
	if (tproc != "") {
		printf("Tracing read/write syscalls for processes named \"%s\"",
		    tproc);
	} else {
		printf("Tracing read/write syscalls");
	}
	printf("... Hit Ctrl-C to end.\n");
}

probe nd_syscall.read.return
{
	if (tproc == "" || execname() == tproc) {
		read <<< gettimeofday_ns() - @entry(gettimeofday_ns());
	}
}

probe nd_syscall.write.return
{
	if (tproc == "" || execname() == tproc) {
		write <<< gettimeofday_ns() - @entry(gettimeofday_ns());
	}
}

probe end
{
	printf("\nsyscall read latency (ns):\n");
	if (@count(read)) { print(@hist_log(read)); }
	printf("syscall write latency (ns):\n");
	if (@count(write)) { print(@hist_log(write)); }
}
